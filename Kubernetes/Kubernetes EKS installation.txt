1. Create a new Ec2 instance with Amazon Linux 2 image with size t2.micro
2. This instance can be used as Bootstrap server to install EKS services. We will require Kubectl and Eksctl installed for EKS service.

You can follow same procedure in the official AWS document Getting started with Amazon EKS â€“ eksctl(https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html)
 1. AWS CLI should be updated to latest version or suggested in the documentation in the above link.
	Copy and paste the below code in instance CLI:
	curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
	unzip awscliv2.zip	
	sudo ./aws/install
	
 2. Setup kubectl
	a. Download kubectl version 1.21
	b. Grant execution permissions to kubectl executable
	c. Move kubectl onto /usr/local/bin
	d. Test that your kubectl installation was successful
	
	Copy and paste the below code in instance CLI:
	curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.1/2023-04-19/bin/linux/amd64/kubectl
	chmod +x ./kubectl
	mv ./kubectl /usr/local/bin 
	kubectl version --short --client
	
3. Setup eksctl
	a. Download and extract the latest release
	b. Move the extracted binary to /usr/local/bin
	c. Test that your eksclt installation was successful
	
	Copy and paste the below code in instance CLI:
	curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
	sudo mv /tmp/eksctl /usr/local/bin
	eksctl version
	
4. Create an IAM Role and attache it to EC2 instance
	Note: create IAM user with programmatic access if your bootstrap system is outside of AWS
	IAM user should have access to
	IAM
	EC2
	CloudFormation
	Note: Check eksctl documentaiton for Minimum IAM policies(https://eksctl.io/usage/minimum-iam-policies/)

5. Create your cluster and nodes
   eksctl create cluster --name cluster-name  \
	--region region-name \
	--node-type instance-type \
	--nodes-min 2 \
	--nodes-max 2 \ 
	--zones <AZ-1>,<AZ-2>

	example:
	eksctl create cluster --name valaxy-cluster \
	--region ap-south-1 \
	--node-type t2.small \
	
6. To delete the EKS clsuter
	eksctl delete cluster valaxy --region ap-south-1
	
7. Validate your cluster using by creating by checking nodes and by creating a pod
	kubectl get nodes
	kubectl run tomcat --image=tomcat 
	
8. Deploying nginx pods on Kubernetes
	kubectl create deployment  demo-nginx --image=nginx --replicas=2 --port=80
	# kubectl deployment regapp --image=valaxy/regapp --replicas=2 --port=8080
	kubectl get all
	kubectl get pod
	
9. Expose the deployment as service. This will create an ELB in front of those 2 containers and allow us to publicly access them.
   kubectl expose deployment demo-nginx --port=80 --type=LoadBalancer
	# kubectl expose deployment regapp --port=8080 --type=LoadBalancer
	kubectl get services -o wide

